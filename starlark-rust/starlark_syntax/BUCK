load("@fbcode_macros//build_defs:native_rules.bzl", "buck_filegroup")
load("@fbcode_macros//build_defs:rust_library.bzl", "rust_library")
load("@fbsource//tools/build_defs:glob_defs.bzl", "glob")

oncall("buck2")

buck_filegroup(
    name = "testcases",
    srcs = glob([
        "src/**/*.golden",
    ]),
)

rust_library(
    name = "starlark_syntax",
    srcs = glob(["src/**/*.rs"]),
    rustc_flags = [
        "--cfg=rust_nightly",
    ],
    test_deps = [
        "fbsource//third-party/rust:serde_json",
    ],
    test_env = {
        # Some of our tests include testcase files relative to CARGO_MANIFEST_DIR.
        # This is a hack that allows both `cargo test` and `buck test` to work.
        "CARGO_MANIFEST_DIR": "$(location :testcases)",
    },
    visibility = [
        # Do not use this crate internally in Meta.
        # `starlark` crate has public API.
        # If you need some feature requiring working with syntax tree, like a linter,
        # please implement it inside the `starlark` crate.
        # For codemods, use libCST.
        "//buck2/starlark-rust/...",
    ],
    deps = [
        "fbsource//third-party/rust:annotate-snippets",
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:derive_more",
        "fbsource//third-party/rust:logos",
        "fbsource//third-party/rust:lsp-types",
        "fbsource//third-party/rust:memchr",
        "fbsource//third-party/rust:num-bigint",
        "fbsource//third-party/rust:num-traits",
        "fbsource//third-party/rust:once_cell",
        "fbsource//third-party/rust:thiserror",
        "//buck2/allocative/allocative:allocative",
        "//buck2/gazebo/dupe:dupe",
    ],
)
